#!/bin/bash

# Script para executar todos os real_time_monitor.py com os arquivos CSV na pasta data
# Executa sequencialmente para todos os modelos: DistilBERT, MiniLM e TinyBERT

echo "=== Iniciando execu√ß√£o de todos os monitores em tempo real ==="
echo "Data/Hora: $(date)"
echo ""

# Definir caminhos
DATA_DIR="./data"
DISTILBERT_DIR="./DistilBERT"
MINILM_DIR="./MiniLM"
TINYBERT_DIR="./TinyBERT"

# Verificar se os diret√≥rios existem
if [ ! -d "$DATA_DIR" ]; then
    echo "‚ùå Erro: Diret√≥rio $DATA_DIR n√£o encontrado!"
    exit 1
fi

if [ ! -d "$DISTILBERT_DIR" ]; then
    echo "‚ùå Erro: Diret√≥rio $DISTILBERT_DIR n√£o encontrado!"
    exit 1
fi

if [ ! -d "$MINILM_DIR" ]; then
    echo "‚ùå Erro: Diret√≥rio $MINILM_DIR n√£o encontrado!"
    exit 1
fi

if [ ! -d "$TINYBERT_DIR" ]; then
    echo "‚ùå Erro: Diret√≥rio $TINYBERT_DIR n√£o encontrado!"
    exit 1
fi

# Contar arquivos CSV
CSV_COUNT=$(find "$DATA_DIR" -name "*.csv" | wc -l)
echo "üìä Encontrados $CSV_COUNT arquivos CSV na pasta data"
echo ""

# Fun√ß√£o para executar monitor de um modelo espec√≠fico
run_model_monitor() {
    local MODEL_NAME=$1
    local MODEL_DIR=$2
    local MONITOR_SCRIPT="realtime_network_monitor.py"
    
    echo "üöÄ Iniciando processamento para modelo: $MODEL_NAME"
    echo "üìÅ Diret√≥rio: $MODEL_DIR"
    
    # Verificar se o script existe
    if [ ! -f "$MODEL_DIR/$MONITOR_SCRIPT" ]; then
        echo "‚ùå Arquivo $MONITOR_SCRIPT n√£o encontrado em $MODEL_DIR"
        return 1
    fi
    
    # Mudar para o diret√≥rio do modelo
    cd "$MODEL_DIR" || exit 1
    
    # Contador de arquivos processados
    local processed=0
    local total_files=$(find "../$DATA_DIR" -name "*.csv" | wc -l)
    
    echo "üìà Processando $total_files arquivos CSV..."
    
    # Processar cada arquivo CSV
    for csv_file in "../$DATA_DIR"/*.csv; do
        if [ -f "$csv_file" ]; then
            csv_basename=$(basename "$csv_file")
            processed=$((processed + 1))
            
            echo "  [$processed/$total_files] Processando: $csv_basename"
            
            # Executar o monitor com o arquivo CSV
            python "$MONITOR_SCRIPT" --simulate "$csv_file" --delay 0.001
            
            # Verificar se a execu√ß√£o foi bem-sucedida
            if [ $? -eq 0 ]; then
                echo "  ‚úÖ Conclu√≠do: $csv_basename"
            else
                echo "  ‚ùå Erro ao processar: $csv_basename"
            fi
            
            echo "  ---"
        fi
    done
    
    echo "‚úÖ $MODEL_NAME: Processamento conclu√≠do ($processed arquivos)"
    echo ""
    
    # Voltar ao diret√≥rio raiz
    cd .. || exit 1
}

# Fun√ß√£o para processar todos os modelos em paralelo (opcional)
run_all_models_parallel() {
    echo "üîÑ Executando todos os modelos em PARALELO..."
    echo "‚ö†Ô∏è  Nota: Isso pode consumir muita CPU e mem√≥ria"
    echo ""
    
    # Executar em background
    (run_model_monitor "DistilBERT" "$DISTILBERT_DIR") &
    DISTILBERT_PID=$!
    
    (run_model_monitor "MiniLM" "$MINILM_DIR") &
    MINILM_PID=$!
    
    (run_model_monitor "TinyBERT" "$TINYBERT_DIR") &
    TINYBERT_PID=$!
    
    # Aguardar conclus√£o de todos
    echo "‚è≥ Aguardando conclus√£o de todos os modelos..."
    wait $DISTILBERT_PID
    echo "‚úÖ DistilBERT conclu√≠do"
    
    wait $MINILM_PID
    echo "‚úÖ MiniLM conclu√≠do"
    
    wait $TINYBERT_PID
    echo "‚úÖ TinyBERT conclu√≠do"
}

# Fun√ß√£o para processar todos os modelos sequencialmente
run_all_models_sequential() {
    echo "üîÑ Executando todos os modelos SEQUENCIALMENTE..."
    echo ""
    
    run_model_monitor "DistilBERT" "$DISTILBERT_DIR"
    run_model_monitor "MiniLM" "$MINILM_DIR" 
    run_model_monitor "TinyBERT" "$TINYBERT_DIR"
}

# Fun√ß√£o para executar apenas um modelo espec√≠fico
run_single_model() {
    local MODEL_CHOICE=$1
    
    case $MODEL_CHOICE in
        "distilbert"|"1")
            run_model_monitor "DistilBERT" "$DISTILBERT_DIR"
            ;;
        "minilm"|"2")
            run_model_monitor "MiniLM" "$MINILM_DIR"
            ;;
        "tinybert"|"3")
            run_model_monitor "TinyBERT" "$TINYBERT_DIR"
            ;;
        *)
            echo "‚ùå Modelo inv√°lido: $MODEL_CHOICE"
            echo "Modelos dispon√≠veis: distilbert, minilm, tinybert"
            exit 1
            ;;
    esac
}

# Menu de op√ß√µes
show_menu() {
    echo "üéØ Escolha uma op√ß√£o:"
    echo "1. Executar DistilBERT apenas"
    echo "2. Executar MiniLM apenas"
    echo "3. Executar TinyBERT apenas"
    echo "4. Executar todos sequencialmente (recomendado)"
    echo "5. Executar todos em paralelo (alto uso de recursos)"
    echo "6. Sair"
    echo ""
}

# Verificar argumentos da linha de comando
if [ $# -eq 0 ]; then
    # Modo interativo
    while true; do
        show_menu
        read -p "Digite sua escolha (1-6): " choice
        
        case $choice in
            1)
                run_single_model "distilbert"
                break
                ;;
            2)
                run_single_model "minilm"
                break
                ;;
            3)
                run_single_model "tinybert"
                break
                ;;
            4)
                run_all_models_sequential
                break
                ;;
            5)
                echo "‚ö†Ô∏è  Tem certeza? Isso pode usar muita CPU/mem√≥ria (y/n):"
                read -p "" confirm
                if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
                    run_all_models_parallel
                fi
                break
                ;;
            6)
                echo "üëã Saindo..."
                exit 0
                ;;
            *)
                echo "‚ùå Op√ß√£o inv√°lida. Tente novamente."
                ;;
        esac
    done
else
    # Modo com argumentos
    case $1 in
        "--all"|"-a")
            run_all_models_sequential
            ;;
        "--parallel"|"-p")
            run_all_models_parallel
            ;;
        "--distilbert"|"-d")
            run_single_model "distilbert"
            ;;
        "--minilm"|"-m")
            run_single_model "minilm"
            ;;
        "--tinybert"|"-t")
            run_single_model "tinybert"
            ;;
        "--help"|"-h")
            echo "Uso: $0 [OP√á√ÉO]"
            echo ""
            echo "Op√ß√µes:"
            echo "  --all         Executar todos os modelos sequencialmente"
            echo "  --parallel    Executar todos os modelos em paralelo"
            echo "  --distilbert  Executar apenas DistilBERT"
            echo "  --minilm      Executar apenas MiniLM"
            echo "  --tinybert    Executar apenas TinyBERT"
            echo "  --help        Mostrar esta ajuda"
            echo ""
            echo "Sem argumentos: modo interativo"
            ;;
        *)
            echo "‚ùå Argumento inv√°lido: $1"
            echo "Use --help para ver as op√ß√µes dispon√≠veis"
            exit 1
            ;;
    esac
fi

# Relat√≥rio final
echo ""
echo "üéâ === EXECU√á√ÉO CONCLU√çDA ==="
echo "Data/Hora: $(date)"
echo ""

# Mostrar arquivos de resultado gerados
echo "üìÑ Arquivos de resultado gerados:"
find . -name "result-*-part-*.txt" -type f -mmin -60 | sort

echo ""
echo "üí° Dica: Verifique os arquivos de resultado para an√°lise detalhada"
echo "üí° Os logs de ataque est√£o em attack_log.json em cada pasta de modelo"
