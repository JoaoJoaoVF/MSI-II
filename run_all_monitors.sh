#!/bin/bash

# Script para executar todos os real_time_monitor.py com os arquivos CSV na pasta data
# Executa sequencialmente para todos os modelos: DistilBERT, MiniLM e TinyBERT
# Vers√£o otimizada com controle de espa√ßo em disco

echo "=== Iniciando execu√ß√£o de todos os monitores em tempo real ==="
echo "Data/Hora: $(date)"
echo ""

# Fun√ß√£o para verificar espa√ßo em disco
check_disk_space() {
    local required_gb=5  # Espa√ßo m√≠nimo necess√°rio em GB
    local available_kb=$(df . | tail -1 | awk '{print $4}')
    local available_gb=$((available_kb / 1024 / 1024))
    
    echo "üíæ Espa√ßo dispon√≠vel: ${available_gb}GB"
    
    if [ $available_gb -lt $required_gb ]; then
        echo "‚ùå ERRO: Espa√ßo insuficiente! Necess√°rio pelo menos ${required_gb}GB"
        echo "üí° Sugest√µes:"
        echo "   - Limpar arquivos tempor√°rios: rm -f */result-*.txt"
        echo "   - Compactar resultados antigos: tar -czf results_backup.tar.gz */result-*.txt"
        echo "   - Usar um diret√≥rio com mais espa√ßo"
        return 1
    fi
    
    echo "‚úÖ Espa√ßo suficiente dispon√≠vel"
    return 0
}

# Fun√ß√£o para limpar arquivos tempor√°rios grandes
cleanup_temp_files() {
    local model_dir=$1
    echo "üßπ Limpando arquivos tempor√°rios em $model_dir..."
    
    # Remove arquivos de resultado muito grandes (>100MB) e vazios
    find "$model_dir" -name "result-*.txt" -size +100M -delete 2>/dev/null || true
    find "$model_dir" -name "result-*.txt" -size 0 -delete 2>/dev/null || true
    
    # Compacta logs de ataque se existirem
    if [ -f "$model_dir/attack_log.json" ] && [ $(stat -f%z "$model_dir/attack_log.json" 2>/dev/null || stat -c%s "$model_dir/attack_log.json" 2>/dev/null || echo 0) -gt 10485760 ]; then
        gzip "$model_dir/attack_log.json" 2>/dev/null || true
    fi
}

# Fun√ß√£o para extrair m√©tricas detalhadas de um arquivo de resultado
extract_and_log_metrics() {
    local result_file=$1
    local csv_name=$2
    local processing_time=$3
    local status=$4
    
    if [ ! -f "$result_file" ] || [ ! -s "$result_file" ]; then
        echo "$csv_name,$status,$processing_time,0,0,0,0,0,0,0"
        return
    fi
    
    # Extrair m√©tricas do arquivo de resultado
    local total_predictions=$(grep -c "Predi√ß√£o:" "$result_file" 2>/dev/null || echo "0")
    local correct_predictions=$(grep -c "‚úÖ" "$result_file" 2>/dev/null || echo "0")
    local incorrect_predictions=$((total_predictions - correct_predictions))
    local file_size=$(stat -f%z "$result_file" 2>/dev/null || stat -c%s "$result_file" 2>/dev/null || echo 0)
    
    # Calcular m√©tricas b√°sicas
    local accuracy="0"
    if [ $total_predictions -gt 0 ]; then
        accuracy=$(echo "scale=4; $correct_predictions / $total_predictions" | bc 2>/dev/null || echo "0")
    fi
    
    # Extrair m√©tricas do final do arquivo (se dispon√≠veis)
    local precision=$(grep "Precision:" "$result_file" | tail -1 | awk '{print $2}' 2>/dev/null || echo "0")
    local recall=$(grep "Recall:" "$result_file" | tail -1 | awk '{print $2}' 2>/dev/null || echo "0")
    local f1_score=$(grep "F1-Score:" "$result_file" | tail -1 | awk '{print $2}' 2>/dev/null || echo "0")
    
    echo "$csv_name,$status,$processing_time,$correct_predictions,$incorrect_predictions,$accuracy,$precision,$recall,$f1_score,$file_size"
}

# Fun√ß√£o para extrair m√©tricas de arquivo j√° existente
extract_metrics_from_result() {
    local result_file=$1
    local csv_name=$2
    
    extract_and_log_metrics "$result_file" "$csv_name" "N/A" "J√Å_PROCESSADO"
}

# Fun√ß√£o para verificar e registrar falhas de predi√ß√£o
check_prediction_failures() {
    local result_file=$1
    local csv_name=$2
    
    if [ ! -f "$result_file" ] || [ ! -s "$result_file" ]; then
        return
    fi
    
    # Procurar por linhas com predi√ß√µes incorretas (marcadas com ‚ùå)
    local failures=$(grep -n "‚ùå" "$result_file" 2>/dev/null || true)
    
    if [ -n "$failures" ]; then
        echo ""
        echo "=== FALHAS DE PREDI√á√ÉO EM $csv_name ==="
        echo "Data: $(date)"
        echo "$failures"
        echo ""
        
        # Contar tipos de falhas
        local ddos_failures=$(echo "$failures" | grep -i "ddos" | wc -l)
        local malware_failures=$(echo "$failures" | grep -i "malware" | wc -l)
        local benign_failures=$(echo "$failures" | grep -i "benign" | wc -l)
        
        echo "Resumo de falhas em $csv_name:"
        echo "  - DDoS: $ddos_failures"
        echo "  - Malware: $malware_failures"
        echo "  - Tr√°fego Benigno: $benign_failures"
        echo "  - Total: $(echo "$failures" | wc -l)"
        echo ""
    fi
}

# Definir caminhos
DATA_DIR="./data"
DISTILBERT_DIR="./DistilBERT"
MINILM_DIR="./MiniLM"
TINYBERT_DIR="./TinyBERT"
RESULTS_DIR="./analysis_results"

# Criar diret√≥rio de resultados se n√£o existir
mkdir -p "$RESULTS_DIR"/{DistilBERT,MiniLM,TinyBERT}

# Verificar espa√ßo em disco antes de iniciar
if ! check_disk_space; then
    exit 1
fi

# Verificar se os diret√≥rios existem
if [ ! -d "$DATA_DIR" ]; then
    echo "‚ùå Erro: Diret√≥rio $DATA_DIR n√£o encontrado!"
    exit 1
fi

if [ ! -d "$DISTILBERT_DIR" ]; then
    echo "‚ùå Erro: Diret√≥rio $DISTILBERT_DIR n√£o encontrado!"
    exit 1
fi

if [ ! -d "$MINILM_DIR" ]; then
    echo "‚ùå Erro: Diret√≥rio $MINILM_DIR n√£o encontrado!"
    exit 1
fi

if [ ! -d "$TINYBERT_DIR" ]; then
    echo "‚ùå Erro: Diret√≥rio $TINYBERT_DIR n√£o encontrado!"
    exit 1
fi

# Contar arquivos CSV
CSV_COUNT=$(find "$DATA_DIR" -name "*.csv" | wc -l)
echo "üìä Encontrados $CSV_COUNT arquivos CSV na pasta data"
echo ""

# Fun√ß√£o para executar monitor de um modelo espec√≠fico
run_model_monitor() {
    local MODEL_NAME=$1
    local MODEL_DIR=$2
    local MONITOR_SCRIPT="realtime_network_monitor.py"
    local BATCH_SIZE=5  # Reduzido para economizar espa√ßo mas garantir completude
    
    echo "üöÄ Iniciando processamento COMPLETO para modelo: $MODEL_NAME"
    echo "üìÅ Diret√≥rio: $MODEL_DIR"
    echo "üéØ OBJETIVO: Processar TODOS os arquivos CSV com m√©tricas completas"
    
    # Verificar se o script existe
    if [ ! -f "$MODEL_DIR/$MONITOR_SCRIPT" ]; then
        echo "‚ùå Arquivo $MONITOR_SCRIPT n√£o encontrado em $MODEL_DIR"
        return 1
    fi
    
    # Limpar apenas arquivos vazios, manter os v√°lidos
    echo "üßπ Limpando apenas arquivos vazios (mantendo dados v√°lidos)..."
    find "$MODEL_DIR" -name "result-*.txt" -size 0 -delete 2>/dev/null || true
    
    # Mudar para o diret√≥rio do modelo
    cd "$MODEL_DIR" || exit 1
    
    # Contador de arquivos processados
    local processed=0
    local success_count=0
    local error_count=0
    local skipped_count=0
    local total_files=$(find "../$DATA_DIR" -name "*.csv" | wc -l)
    local results_summary="../$RESULTS_DIR/${MODEL_NAME}/processing_summary.txt"
    local metrics_summary="../$RESULTS_DIR/${MODEL_NAME}/metrics_summary.txt"
    local failed_predictions="../$RESULTS_DIR/${MODEL_NAME}/failed_predictions.txt"
    
    echo "üìà Processando $total_files arquivos CSV - MODO COMPLETO"
    echo "üìä M√©tricas ser√£o coletadas para TODOS os arquivos"
    echo "üìÑ Resumo: $results_summary"
    echo "üìä M√©tricas: $metrics_summary"
    echo "‚ö†Ô∏è  Falhas de predi√ß√£o: $failed_predictions"
    
    # Inicializar arquivos de resumo
    {
        echo "=== RESUMO DE PROCESSAMENTO COMPLETO - $MODEL_NAME ==="
        echo "Data/Hora de in√≠cio: $(date)"
        echo "Total de arquivos: $total_files"
        echo "Objetivo: Processar TODOS os arquivos com m√©tricas completas"
        echo ""
    } > "$results_summary"
    
    {
        echo "=== M√âTRICAS DETALHADAS - $MODEL_NAME ==="
        echo "Data/Hora: $(date)"
        echo "Arquivo,Status,Tempo_Processamento,Predi√ß√µes_Corretas,Predi√ß√µes_Incorretas,Accuracy,Precision,Recall,F1_Score,Tamanho_Resultado"
        echo ""
    } > "$metrics_summary"
    
    {
        echo "=== FALHAS DE PREDI√á√ÉO - $MODEL_NAME ==="
        echo "Data/Hora: $(date)"
        echo "Registro de casos onde o modelo n√£o predisse corretamente"
        echo ""
    } > "$failed_predictions"
    
    # Processar cada arquivo CSV - GARANTIR COMPLETUDE
    local batch_count=0
    echo "üîÑ Iniciando processamento sequencial de TODOS os arquivos..."
    
    for csv_file in "../$DATA_DIR"/*.csv; do
        if [ -f "$csv_file" ]; then
            csv_basename=$(basename "$csv_file")
            processed=$((processed + 1))
            batch_count=$((batch_count + 1))
            
            echo "  [$processed/$total_files] üéØ PROCESSANDO: $csv_basename"
            
            # Nome do arquivo de resultado
            local result_file="result-$(echo $MODEL_NAME | tr '[:upper:]' '[:lower:]')-part-$csv_basename.txt"
            
            # Verificar se j√° foi processado com sucesso (arquivo existe e n√£o est√° vazio)
            if [ -f "$result_file" ] && [ -s "$result_file" ]; then
                local file_size=$(stat -f%z "$result_file" 2>/dev/null || stat -c%s "$result_file" 2>/dev/null || echo 0)
                if [ $file_size -gt 1000 ]; then  # Pelo menos 1KB de dados
                    echo "    ‚úÖ J√Å PROCESSADO: $csv_basename (${file_size} bytes) - MANTENDO"
                    success_count=$((success_count + 1))
                    skipped_count=$((skipped_count + 1))
                    echo "J√Å_PROCESSADO: $csv_basename - $(date) - ${file_size} bytes" >> "$results_summary"
                    
                    # Extrair m√©tricas do arquivo existente (se poss√≠vel)
                    echo "    üìä Extraindo m√©tricas do arquivo existente..."
                    extract_metrics_from_result "$result_file" "$csv_basename" >> "$metrics_summary"
                    
                    echo "    ---"
                    continue
                fi
            fi
            
            # Verificar espa√ßo em disco a cada lote
            if [ $((batch_count % BATCH_SIZE)) -eq 0 ]; then
                local available_kb=$(df . | tail -1 | awk '{print $4}')
                local available_mb=$((available_kb / 1024))
                
                echo "    üíæ Verificando espa√ßo: ${available_mb}MB dispon√≠vel"
                
                if [ $available_mb -lt 300 ]; then  # Menos de 300MB
                    echo "    üßπ Espa√ßo baixo, limpando apenas arquivos vazios..."
                    find . -name "result-*.txt" -size 0 -delete 2>/dev/null || true
                    
                    # Verificar novamente
                    available_kb=$(df . | tail -1 | awk '{print $4}')
                    available_mb=$((available_kb / 1024))
                    
                    if [ $available_mb -lt 100 ]; then  # Menos de 100MB
                        echo "    ‚ö†Ô∏è  ESPA√áO CR√çTICO (${available_mb}MB) - Continuando com arquivo menor"
                        echo "    üìù For√ßando processamento com sa√≠da reduzida..."
                    fi
                fi
            fi
            
            # Registro do in√≠cio do processamento
            local start_time=$(date +%s)
            echo "    ‚è±Ô∏è  Iniciando processamento √†s $(date)"
            
            # Executar o monitor com timeout estendido e captura detalhada
            echo "    üöÄ Executando an√°lise do modelo $MODEL_NAME..."
            
            # Executar com timeout de 10 minutos por arquivo (estendido para garantir completude)
            timeout 600 python "$MONITOR_SCRIPT" --simulate "$csv_file" --delay 0.001 2>&1 | tee "${csv_basename}_execution.log"
            local exit_code=$?
            local end_time=$(date +%s)
            local processing_time=$((end_time - start_time))
            
            if [ $exit_code -eq 0 ]; then
                success_count=$((success_count + 1))
                echo "    ‚úÖ SUCESSO: $csv_basename (${processing_time}s)"
                
                # Verificar se o arquivo de resultado foi criado e analisar m√©tricas
                if [ -f "$result_file" ] && [ -s "$result_file" ]; then
                    local file_size=$(stat -f%z "$result_file" 2>/dev/null || stat -c%s "$result_file" 2>/dev/null || echo 0)
                    echo "      üìä Resultado: $result_file (${file_size} bytes)"
                    
                    # Extrair e registrar m√©tricas
                    echo "      üìà Extraindo m√©tricas detalhadas..."
                    extract_and_log_metrics "$result_file" "$csv_basename" "$processing_time" "SUCESSO" >> "$metrics_summary"
                    
                    # Verificar falhas de predi√ß√£o
                    echo "      üîç Verificando falhas de predi√ß√£o..."
                    check_prediction_failures "$result_file" "$csv_basename" >> "$failed_predictions"
                    
                    echo "SUCESSO: $csv_basename - ${processing_time}s - ${file_size} bytes - $(date)" >> "$results_summary"
                else
                    echo "      ‚ö†Ô∏è  AVISO: Arquivo de resultado vazio ou n√£o criado"
                    echo "AVISO: $csv_basename - Resultado vazio ap√≥s ${processing_time}s - $(date)" >> "$results_summary"
                    echo "$csv_basename,VAZIO,${processing_time},0,0,0,0,0,0,0" >> "$metrics_summary"
                fi
                
            elif [ $exit_code -eq 124 ]; then
                error_count=$((error_count + 1))
                echo "    ‚è∞ TIMEOUT: $csv_basename (>10min)"
                echo "TIMEOUT: $csv_basename - >10min - $(date)" >> "$results_summary"
                echo "$csv_basename,TIMEOUT,600,0,0,0,0,0,0,0" >> "$metrics_summary"
                
            else
                error_count=$((error_count + 1))
                echo "    ‚ùå ERRO: $csv_basename (c√≥digo: $exit_code, ${processing_time}s)"
                
                # Tentar extrair informa√ß√µes do log de erro
                if [ -f "${csv_basename}_execution.log" ]; then
                    echo "      üìã Log de erro dispon√≠vel, tentando diagn√≥stico..."
                    local error_info=$(tail -5 "${csv_basename}_execution.log" | grep -E "(Error|Exception|OSError)" | head -1)
                    echo "      üîç Erro: $error_info"
                fi
                
                echo "ERRO: $csv_basename - C√≥digo $exit_code - ${processing_time}s - $(date)" >> "$results_summary"
                echo "$csv_basename,ERRO,${processing_time},0,0,0,0,0,0,0" >> "$metrics_summary"
                
                # Para erros de espa√ßo, tentar limpeza e continuar
                if [ $exit_code -eq 1 ] || grep -q "No space left" "${csv_basename}_execution.log" 2>/dev/null; then
                    echo "      üßπ Erro de espa√ßo detectado, limpando e continuando..."
                    find . -name "result-*.txt" -size 0 -delete 2>/dev/null || true
                    find . -name "*_execution.log" -mmin +5 -delete 2>/dev/null || true
                fi
            fi
            
            # Limpeza do log de execu√ß√£o para economizar espa√ßo
            rm -f "${csv_basename}_execution.log" 2>/dev/null || true
            
            echo "    ---"
        fi
    done
    
    # Finalizar resumo com estat√≠sticas completas
    {
        echo ""
        echo "=== ESTAT√çSTICAS FINAIS COMPLETAS ==="
        echo "Total processados: $processed/$total_files"
        echo "Sucessos: $success_count"
        echo "Erros: $error_count"
        echo "J√° processados (reutilizados): $skipped_count"
        echo "Taxa de sucesso: $(( (success_count * 100) / processed ))%"
        echo "Taxa de completude: $(( ((success_count + skipped_count) * 100) / total_files ))%"
        echo ""
        echo "=== GARANTIA DE COMPLETUDE ==="
        echo "Arquivos com m√©tricas coletadas: $((success_count + skipped_count))"
        echo "Arquivos restantes: $((total_files - success_count - skipped_count))"
        echo "Data/Hora de conclus√£o: $(date)"
    } >> "$results_summary"
    
    echo "‚úÖ $MODEL_NAME: Processamento COMPLETO finalizado"
    echo "   üìä Sucessos: $success_count/$processed"
    echo "   üîÑ Reutilizados: $skipped_count/$processed"
    echo "   ‚ùå Erros: $error_count/$processed"
    echo "   üéØ Completude: $(( ((success_count + skipped_count) * 100) / total_files ))%"
    echo "   üìÑ Resumo: $results_summary"
    echo "   üìä M√©tricas: $metrics_summary"
    echo "   ‚ö†Ô∏è  Falhas: $failed_predictions"
    echo ""
    
    # Voltar ao diret√≥rio raiz
    cd .. || exit 1
    
    return 0
}

# Fun√ß√£o para processar todos os modelos em paralelo (opcional)
run_all_models_parallel() {
    echo "üîÑ Executando todos os modelos em PARALELO..."
    echo "‚ö†Ô∏è  Nota: Isso pode consumir muita CPU, mem√≥ria e espa√ßo em disco"
    echo ""
    
    # Verificar espa√ßo em disco antes de iniciar paralelo
    local available_kb=$(df . | tail -1 | awk '{print $4}')
    local available_gb=$((available_kb / 1024 / 1024))
    
    if [ $available_gb -lt 10 ]; then
        echo "‚ùå Espa√ßo insuficiente para execu√ß√£o paralela (${available_gb}GB < 10GB)"
        echo "üí° Use execu√ß√£o sequencial ou libere mais espa√ßo"
        return 1
    fi
    
    # Executar em background
    (run_model_monitor "DistilBERT" "$DISTILBERT_DIR") &
    DISTILBERT_PID=$!
    
    (run_model_monitor "MiniLM" "$MINILM_DIR") &
    MINILM_PID=$!
    
    (run_model_monitor "TinyBERT" "$TINYBERT_DIR") &
    TINYBERT_PID=$!
    
    # Aguardar conclus√£o de todos
    echo "‚è≥ Aguardando conclus√£o de todos os modelos..."
    wait $DISTILBERT_PID
    echo "‚úÖ DistilBERT conclu√≠do"
    
    wait $MINILM_PID
    echo "‚úÖ MiniLM conclu√≠do"
    
    wait $TINYBERT_PID
    echo "‚úÖ TinyBERT conclu√≠do"
}

# Fun√ß√£o para processar todos os modelos sequencialmente
run_all_models_sequential() {
    echo "üîÑ Executando TODOS OS MODELOS SEQUENCIALMENTE..."
    echo "üéØ OBJETIVO: Coletar m√©tricas completas de TODOS os 3 modelos para TODOS os arquivos CSV"
    echo "üìä Garantindo que nenhum arquivo ou modelo seja pulado"
    echo ""
    
    # Verificar espa√ßo antes de cada modelo
    local start_time=$(date +%s)
    
    echo "üìã === PLANO DE EXECU√á√ÉO COMPLETA ==="
    echo "1. DistilBERT: Todos os $(find $DATA_DIR -name "*.csv" | wc -l) arquivos CSV"
    echo "2. MiniLM: Todos os $(find $DATA_DIR -name "*.csv" | wc -l) arquivos CSV"
    echo "3. TinyBERT: Todos os $(find $DATA_DIR -name "*.csv" | wc -l) arquivos CSV"
    echo "Total de processamentos: $(($(find $DATA_DIR -name "*.csv" | wc -l) * 3))"
    echo ""
    
    # Criar arquivo de controle geral
    local general_summary="$RESULTS_DIR/complete_execution_summary.txt"
    {
        echo "=== EXECU√á√ÉO COMPLETA DE TODOS OS MODELOS ==="
        echo "Data/Hora de in√≠cio: $(date)"
        echo "Total de arquivos CSV: $(find $DATA_DIR -name "*.csv" | wc -l)"
        echo "Modelos: DistilBERT, MiniLM, TinyBERT"
        echo "Objetivo: M√©tricas completas para todos os modelos e arquivos"
        echo ""
    } > "$general_summary"
    
    # Executar DistilBERT
    echo "üü¶ === FASE 1/3: DISTILBERT ==="
    check_disk_space || echo "‚ö†Ô∏è  Continuando mesmo com pouco espa√ßo..."
    run_model_monitor "DistilBERT" "$DISTILBERT_DIR"
    local distilbert_status=$?
    echo "DISTILBERT_STATUS: $distilbert_status - $(date)" >> "$general_summary"
    echo ""
    
    # Executar MiniLM
    echo "üü© === FASE 2/3: MINILM ==="
    check_disk_space || echo "‚ö†Ô∏è  Continuando mesmo com pouco espa√ßo..."
    run_model_monitor "MiniLM" "$MINILM_DIR"
    local minilm_status=$?
    echo "MINILM_STATUS: $minilm_status - $(date)" >> "$general_summary"
    echo ""
    
    # Executar TinyBERT
    echo "üü® === FASE 3/3: TINYBERT ==="
    check_disk_space || echo "‚ö†Ô∏è  Continuando mesmo com pouco espa√ßo..."
    run_model_monitor "TinyBERT" "$TINYBERT_DIR"
    local tinybert_status=$?
    echo "TINYBERT_STATUS: $tinybert_status - $(date)" >> "$general_summary"
    echo ""
    
    local end_time=$(date +%s)
    local total_time=$((end_time - start_time))
    
    # Finalizar resumo geral
    {
        echo ""
        echo "=== RESUMO FINAL DA EXECU√á√ÉO COMPLETA ==="
        echo "Tempo total: ${total_time}s ($((total_time / 60))min)"
        echo "Status DistilBERT: $distilbert_status"
        echo "Status MiniLM: $minilm_status"
        echo "Status TinyBERT: $tinybert_status"
        echo "Data/Hora de conclus√£o: $(date)"
        echo ""
        echo "=== VERIFICA√á√ÉO DE COMPLETUDE ==="
    } >> "$general_summary"
    
    # Verificar completude para cada modelo
    for model in DistilBERT MiniLM TinyBERT; do
        local model_dir_path=""
        case $model in
            "DistilBERT") model_dir_path="$DISTILBERT_DIR" ;;
            "MiniLM") model_dir_path="$MINILM_DIR" ;;
            "TinyBERT") model_dir_path="$TINYBERT_DIR" ;;
        esac
        
        if [ -d "$model_dir_path" ]; then
            local result_count=$(find "$model_dir_path" -name "result-*.txt" -size +0c | wc -l)
            local csv_count=$(find "$DATA_DIR" -name "*.csv" | wc -l)
            local completeness=$((result_count * 100 / csv_count))
            
            echo "$model: $result_count/$csv_count arquivos processados (${completeness}%)" >> "$general_summary"
            
            if [ $completeness -lt 100 ]; then
                echo "  ‚ö†Ô∏è  ATEN√á√ÉO: $model n√£o processou todos os arquivos!" >> "$general_summary"
                # Listar arquivos faltantes
                echo "  Arquivos faltantes:" >> "$general_summary"
                for csv_file in "$DATA_DIR"/*.csv; do
                    local csv_basename=$(basename "$csv_file")
                    local expected_result="result-$(echo $model | tr '[:upper:]' '[:lower:]')-part-$csv_basename.txt"
                    if [ ! -f "$model_dir_path/$expected_result" ] || [ ! -s "$model_dir_path/$expected_result" ]; then
                        echo "    - $csv_basename" >> "$general_summary"
                    fi
                done
            else
                echo "  ‚úÖ $model: TODOS os arquivos processados!" >> "$general_summary"
            fi
        fi
    done
    
    echo ""
    echo "üéâ === EXECU√á√ÉO COMPLETA FINALIZADA ==="
    echo "üìÑ Resumo geral: $general_summary"
    echo ""
    
    # Mostrar estat√≠sticas consolidadas
    show_consolidated_stats
}

# Fun√ß√£o para mostrar estat√≠sticas consolidadas
show_consolidated_stats() {
    echo "üìä === ESTAT√çSTICAS CONSOLIDADAS DE TODOS OS MODELOS ==="
    echo ""
    
    local csv_total=$(find "$DATA_DIR" -name "*.csv" | wc -l)
    echo "üìÅ Total de arquivos CSV: $csv_total"
    echo ""
    
    for model in DistilBERT MiniLM TinyBERT; do
        echo "üî∏ === $model ==="
        
        local model_dir_path=""
        case $model in
            "DistilBERT") model_dir_path="$DISTILBERT_DIR" ;;
            "MiniLM") model_dir_path="$MINILM_DIR" ;;
            "TinyBERT") model_dir_path="$TINYBERT_DIR" ;;
        esac
        
        if [ -d "$model_dir_path" ]; then
            # Contar resultados
            local result_files=$(find "$model_dir_path" -name "result-*.txt" -size +0c | wc -l)
            local empty_files=$(find "$model_dir_path" -name "result-*.txt" -size 0 | wc -l)
            local completeness=$((result_files * 100 / csv_total))
            
            echo "  üìä Arquivos processados: $result_files/$csv_total (${completeness}%)"
            echo "  üìÑ Arquivos v√°lidos: $result_files"
            echo "  ‚ö†Ô∏è  Arquivos vazios: $empty_files"
            
            # Verificar arquivos de m√©tricas
            local metrics_file="$RESULTS_DIR/$model/metrics_summary.txt"
            if [ -f "$metrics_file" ]; then
                local metrics_lines=$(grep -c "," "$metrics_file" 2>/dev/null || echo "0")
                echo "  üìà Linhas de m√©tricas: $metrics_lines"
                
                # Estat√≠sticas de sucesso do arquivo de m√©tricas
                local success_count=$(grep -c ",SUCESSO," "$metrics_file" 2>/dev/null || echo "0")
                local error_count=$(grep -c ",ERRO," "$metrics_file" 2>/dev/null || echo "0")
                local timeout_count=$(grep -c ",TIMEOUT," "$metrics_file" 2>/dev/null || echo "0")
                
                echo "  ‚úÖ Sucessos: $success_count"
                echo "  ‚ùå Erros: $error_count"
                echo "  ‚è∞ Timeouts: $timeout_count"
            fi
            
            # Verificar arquivo de falhas
            local failures_file="$RESULTS_DIR/$model/failed_predictions.txt"
            if [ -f "$failures_file" ]; then
                local failure_sections=$(grep -c "=== FALHAS DE PREDI√á√ÉO" "$failures_file" 2>/dev/null || echo "0")
                echo "  üö® Arquivos com falhas de predi√ß√£o: $failure_sections"
            fi
            
            # Tamanho total dos resultados
            if command -v du >/dev/null 2>&1; then
                local model_size=$(du -sh "$model_dir_path" 2>/dev/null | cut -f1)
                echo "  üíæ Tamanho total: $model_size"
            fi
            
        else
            echo "  ‚ùå Diret√≥rio n√£o encontrado: $model_dir_path"
        fi
        echo ""
    done
    
    # Criar arquivo de estat√≠sticas consolidadas
    local consolidated_stats="$RESULTS_DIR/consolidated_statistics.txt"
    {
        echo "=== ESTAT√çSTICAS CONSOLIDADAS ==="
        echo "Gerado em: $(date)"
        echo ""
        echo "Total de arquivos CSV: $csv_total"
        echo ""
        
        for model in DistilBERT MiniLM TinyBERT; do
            echo "=== $model ==="
            case $model in
                "DistilBERT") model_dir_path="$DISTILBERT_DIR" ;;
                "MiniLM") model_dir_path="$MINILM_DIR" ;;
                "TinyBERT") model_dir_path="$TINYBERT_DIR" ;;
            esac
            
            if [ -d "$model_dir_path" ]; then
                local result_files=$(find "$model_dir_path" -name "result-*.txt" -size +0c | wc -l)
                local completeness=$((result_files * 100 / csv_total))
                echo "Completude: ${completeness}% ($result_files/$csv_total)"
                
                local metrics_file="$RESULTS_DIR/$model/metrics_summary.txt"
                if [ -f "$metrics_file" ]; then
                    local success_count=$(grep -c ",SUCESSO," "$metrics_file" 2>/dev/null || echo "0")
                    local error_count=$(grep -c ",ERRO," "$metrics_file" 2>/dev/null || echo "0")
                    echo "Sucessos: $success_count"
                    echo "Erros: $error_count"
                fi
            else
                echo "Status: Diret√≥rio n√£o encontrado"
            fi
            echo ""
        done
        
    } > "$consolidated_stats"
    
    echo "üìÑ Estat√≠sticas salvas em: $consolidated_stats"
}

# Fun√ß√£o para verificar se algum modelo precisa ser reprocessado
check_missing_files() {
    echo "üîç === VERIFICANDO ARQUIVOS FALTANTES ==="
    echo ""
    
    local csv_files=($(find "$DATA_DIR" -name "*.csv" -exec basename {} \;))
    local missing_any=false
    
    for model in DistilBERT MiniLM TinyBERT; do
        echo "üî∏ Verificando $model..."
        
        local model_dir_path=""
        case $model in
            "DistilBERT") model_dir_path="$DISTILBERT_DIR" ;;
            "MiniLM") model_dir_path="$MINILM_DIR" ;;
            "TinyBERT") model_dir_path="$TINYBERT_DIR" ;;
        esac
        
        local missing_files=()
        for csv_file in "${csv_files[@]}"; do
            local expected_result="result-$(echo $model | tr '[:upper:]' '[:lower:]')-part-$csv_file.txt"
            if [ ! -f "$model_dir_path/$expected_result" ] || [ ! -s "$model_dir_path/$expected_result" ]; then
                missing_files+=("$csv_file")
                missing_any=true
            fi
        done
        
        if [ ${#missing_files[@]} -eq 0 ]; then
            echo "  ‚úÖ Todos os arquivos processados"
        else
            echo "  ‚ö†Ô∏è  Arquivos faltantes (${#missing_files[@]}/${#csv_files[@]}):"
            for missing in "${missing_files[@]}"; do
                echo "    - $missing"
            done
        fi
        echo ""
    done
    
    if [ "$missing_any" = true ]; then
        echo "‚ö†Ô∏è  ATEN√á√ÉO: Alguns arquivos n√£o foram processados em todos os modelos"
        echo "üí° Recomenda√ß√£o: Execute novamente os modelos com arquivos faltantes"
        return 1
    else
        echo "‚úÖ PERFEITO: Todos os arquivos foram processados em todos os modelos!"
        return 0
    fi
}
run_single_model() {
    local MODEL_CHOICE=$1
    
    case $MODEL_CHOICE in
        "distilbert"|"1")
            run_model_monitor "DistilBERT" "$DISTILBERT_DIR"
            ;;
        "minilm"|"2")
            run_model_monitor "MiniLM" "$MINILM_DIR"
            ;;
        "tinybert"|"3")
            run_model_monitor "TinyBERT" "$TINYBERT_DIR"
            ;;
        *)
            echo "‚ùå Modelo inv√°lido: $MODEL_CHOICE"
            echo "Modelos dispon√≠veis: distilbert, minilm, tinybert"
            exit 1
            ;;
    esac
}

# Menu de op√ß√µes
show_menu() {
    echo "üéØ Escolha uma op√ß√£o:"
    echo "1. Executar DistilBERT apenas"
    echo "2. Executar MiniLM apenas"
    echo "3. Executar TinyBERT apenas"
    echo "4. ‚≠ê EXECUTAR TODOS OS MODELOS COMPLETO (recomendado)"
    echo "5. Executar todos em paralelo (alto uso de recursos)"
    echo "6. Verificar arquivos faltantes"
    echo "7. Mostrar estat√≠sticas consolidadas"
    echo "8. Limpar arquivos tempor√°rios e resultados vazios"
    echo "9. Mostrar relat√≥rio de espa√ßo em disco"
    echo "10. Sair"
    echo ""
    echo "üí° DICA: Op√ß√£o 4 √© recomendada para coletar TODAS as m√©tricas"
    echo ""
}

# Fun√ß√£o para limpeza geral
cleanup_all() {
    echo "üßπ Limpando arquivos tempor√°rios e resultados vazios..."
    
    for dir in "$DISTILBERT_DIR" "$MINILM_DIR" "$TINYBERT_DIR"; do
        if [ -d "$dir" ]; then
            echo "  Limpando $dir..."
            cleanup_temp_files "$dir"
        fi
    done
    
    echo "‚úÖ Limpeza conclu√≠da"
}

# Fun√ß√£o para mostrar relat√≥rio de espa√ßo
show_disk_report() {
    echo "üíæ === RELAT√ìRIO DE ESPA√áO EM DISCO ==="
    df -h .
    echo ""
    
    echo "üìÅ Tamanho dos diret√≥rios:"
    for dir in "$DISTILBERT_DIR" "$MINILM_DIR" "$TINYBERT_DIR" "$RESULTS_DIR"; do
        if [ -d "$dir" ]; then
            size=$(du -sh "$dir" 2>/dev/null | cut -f1)
            echo "  $dir: $size"
        fi
    done
    echo ""
    
    echo "üìÑ Arquivos de resultado:"
    find . -name "result-*.txt" -exec ls -lh {} \; | awk '{print "  " $9 ": " $5}' | head -10
    if [ $(find . -name "result-*.txt" | wc -l) -gt 10 ]; then
        echo "  ... e mais $(( $(find . -name "result-*.txt" | wc -l) - 10 )) arquivos"
    fi
}

# Verificar argumentos da linha de comando
if [ $# -eq 0 ]; then
    # Modo interativo
    while true; do
        show_menu
        read -p "Digite sua escolha (1-6): " choice
        
        case $choice in
            1)
                run_single_model "distilbert"
                break
                ;;
            2)
                run_single_model "minilm"
                break
                ;;
            3)
                run_single_model "tinybert"
                break
                ;;
            4)
                run_all_models_sequential
                break
                ;;
            5)
                echo "‚ö†Ô∏è  Tem certeza? Isso pode usar muita CPU/mem√≥ria/disco (y/n):"
                read -p "" confirm
                if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
                    run_all_models_parallel
                fi
                break
                ;;
            6)
                check_missing_files
                ;;
            7)
                show_consolidated_stats
                ;;
            8)
                cleanup_all
                ;;
            9)
                show_disk_report
                ;;
            10)
                echo "üëã Saindo..."
                exit 0
                ;;
            *)
                echo "‚ùå Op√ß√£o inv√°lida. Tente novamente."
                ;;
        esac
    done
else
    # Modo com argumentos
    case $1 in
        "--all"|"-a")
            run_all_models_sequential
            ;;
        "--parallel"|"-p")
            run_all_models_parallel
            ;;
        "--distilbert"|"-d")
            run_single_model "distilbert"
            ;;
        "--minilm"|"-m")
            run_single_model "minilm"
            ;;
        "--tinybert"|"-t")
            run_single_model "tinybert"
            ;;
        "--cleanup"|"-c")
            cleanup_all
            ;;
        "--disk"|"-s")
            show_disk_report
            ;;
        "--check"|"-ck")
            check_missing_files
            ;;
        "--stats"|"-st")
            show_consolidated_stats
            ;;
        "--missing"|"-m")
            echo "üîç Verificando arquivos faltantes..."
            check_missing_files
            ;;
        "--complete"|"-comp")
            echo "üéØ Executando processamento COMPLETO de todos os modelos..."
            run_all_models_sequential
            ;;
        "--help"|"-h")
            echo "Uso: $0 [OP√á√ÉO]"
            echo ""
            echo "Op√ß√µes:"
            echo "  --all         Executar todos os modelos sequencialmente"
            echo "  --parallel    Executar todos os modelos em paralelo"
            echo "  --distilbert  Executar apenas DistilBERT"
            echo "  --minilm      Executar apenas MiniLM"
            echo "  --tinybert    Executar apenas TinyBERT"
            echo "  --cleanup     Limpar arquivos tempor√°rios"
            echo "  --disk        Mostrar relat√≥rio de espa√ßo em disco"
            echo "  --check       Verificar arquivos faltantes"
            echo "  --stats       Mostrar estat√≠sticas consolidadas"
            echo "  --missing     Verificar arquivos faltantes"
            echo "  --complete    Executar processamento completo"
            echo "  --help        Mostrar esta ajuda"
            echo ""
            echo "Sem argumentos: modo interativo"
            ;;
        *)
            echo "‚ùå Argumento inv√°lido: $1"
            echo "Use --help para ver as op√ß√µes dispon√≠veis"
            exit 1
            ;;
    esac
fi

# Relat√≥rio final
echo ""
echo "üéâ === EXECU√á√ÉO CONCLU√çDA ==="
echo "Data/Hora: $(date)"
echo ""

# Mostrar estat√≠sticas finais
echo "üìä === ESTAT√çSTICAS FINAIS ==="
for model in DistilBERT MiniLM TinyBERT; do
    summary_file="$RESULTS_DIR/$model/processing_summary.txt"
    if [ -f "$summary_file" ]; then
        echo "üî∏ $model:"
        grep -E "(Sucessos:|Erros:|Taxa de sucesso:)" "$summary_file" | sed 's/^/    /'
    fi
done
echo ""

# Mostrar arquivos de resultado gerados
echo "üìÑ Resumos de processamento:"
find "$RESULTS_DIR" -name "processing_summary.txt" -type f | sort

echo ""
echo "üìÑ Arquivos de resultado recentes (√∫ltimos 10):"
find . -name "result-*.txt" -type f -mmin -60 -size +0c | sort | tail -10

echo ""
echo "ÔøΩ Espa√ßo final em disco:"
df -h . | tail -1

echo ""
echo "ÔøΩüí° Dicas:"
echo "   - Verifique os resumos em $RESULTS_DIR para an√°lise detalhada"
echo "   - Use '$0 --cleanup' para limpar arquivos tempor√°rios"
echo "   - Use '$0 --disk' para ver relat√≥rio completo de espa√ßo"
echo "   - Os logs de ataque est√£o em attack_log.json em cada pasta de modelo"
